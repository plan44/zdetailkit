//
//  ViewController.m
//  ZDetailKitMinimalDemo
//
//  Created by Lukas Zeller on 23.02.13.
//  Copyright (c) 2013 plan44.ch. All rights reserved.
//

#import "ViewController.h"

#import "ZDetailKit.h"
#import "ZStringToCoordinate2DTransformer.h"

@interface ViewController ()

@end

@implementation ViewController

- (void)viewDidLoad
{
  [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
}

- (void)didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // Dispose of any resources that can be recreated.
}


#pragma mark - here's all the code for this demo

// This is the only method implemented to make the entire settings dialog
// work using ZDetailKit. The rest of this demo is template code
// generated by XCode 4.6
// (New -> New Project -> iOS -> Application -> Single View Application)

// Of course, as we need MapKit and CoreLocation, these frameworks must be added

- (IBAction)SettingsButtonPressed:(id)sender
{
  // someone wants to see our settings.
  // So let's setup a controller with an appropriate title
  ZDetailTableViewController *myDetailTableViewController = [ZDetailTableViewController controllerWithTitle:@"Settings"];

  // Set the type of table cells to use
  myDetailTableViewController.defaultCellStyle = ZDetailViewCellStylePrefs; // this is UITableViewCellStyleValue1 with some options, good for iOS-like prefs

  // Once this controller gets presented, it calls the following block to setup its content
  [myDetailTableViewController setBuildDetailContentHandler:
    ^BOOL(ZDetailTableViewController *dc) {
      // This is a block - to prevent retain cycles do not refer to myDetailTableViewController;
      // use dc instead, that's myDetailTableViewController passed to the block as a parameter.

      // Now start a table section
      [dc startSectionWithText:@"You" asTitle:YES];

      // Add a cell for entering a name
      {
        ZTextFieldCell *t = [dc detailCell:[ZTextFieldCell class]];
        t.labelText = @"Name";
        t.editInDetailView = NO; // set this to yes if you don't want to edit in-place
        t.valueCellShare = 0.7; // more room for text editing than normal settings cell would have (70%)
        // connect the cell's value to the model. Here we just use NSUserDefaults
        [t.valueConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"userName"];
      }
      // Add a cell for entering your location from a map
      {
        ZLocationCell *l = [dc detailCell:[ZLocationCell class]];
        l.labelText = @"Your location";
        // connect the cell's values to the model. This cell has a location text and a coordinate
        // - connect the text
        [l.textValueConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"userLocation"];
        // - also connect the coordinate
        [l.coordinateValueConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"userCoordinate"];
        //   the coordinate needs to be converted from CLLocationCoordinate2D to a text and vice versa.
        //   ZValueConnector can use NSValueTransformer for such tasks.
        //   ZUtils has such a transformer, lets use it
        l.coordinateValueConnector.valueTransformer = [NSValueTransformer valueTransformerForName:@"ZStringToCoordinate2DTransformer"];
      }
      // And a cell to choose a date
      {
        ZDateTimeCell *d = [dc detailCell:[ZDateTimeCell class] withStyle:UITableViewCellStyleValue1]; // plain UITableViewCellStyleValue1, no options
        d.labelText = @"Birthday";
        d.dateOnly = YES;
        [d.startDateConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"birthDate"];
      }

      [dc endSection];


      // just for the fun, add some more settings in a second section
      [dc startSectionWithText:@"Others…" asTitle:YES];

      // a switch
      {
        ZSwitchCell *sw = [dc detailCell:[ZSwitchCell class]];
        sw.labelText = @"…may see name";
        [sw.valueConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"othersCanSeeName"];
      }
      // another switch
      {
        ZSwitchCell *sw = [dc detailCell:[ZSwitchCell class]];
        sw.labelText = @"…may see location";
        [sw.valueConnector connectTo:[NSUserDefaults standardUserDefaults] keyPath:@"othersCanSeeLocation"];
      }

      [dc endSection];

      // If you want to see more, like multiple choices, validation, colors, numbers, submenus, expanding/collapsing subsections
      // password cells, see the ZDetailKitFullDemo sample project.

      // return YES if contents were generated
      return YES;
    }
  ];

  // Only thing left: actually present the settings
  [self presentViewController:[myDetailTableViewController viewControllerForModalPresentation] animated:YES completion:nil];

  // that's all.

  // Note: We present modally here using a wrapper provided by ZDetailTableViewController itself, viewControllerForModalPresentation.
  // ZDetailTableViewController can also be pushed onto existing UINavigationControllers or presented as popovers on iPad
  // using the popoverControllerForPresentation also provided by ZDetailTableViewController.
}


@end
